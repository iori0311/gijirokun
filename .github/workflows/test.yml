name: Database Tests

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'supabase/**'
      - 'tests/**'

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Start Supabase local development setup
        run: supabase start

      - name: Run database migrations
        run: |
          # マイグレーションの実行（自動で実行されるはず）
          supabase db reset

      - name: Run database tests
        id: run-tests
        run: |
          # テスト結果を保存するディレクトリを作成
          mkdir -p test_results

          # シードデータの投入
          PGPASSWORD=postgres psql -h localhost -p 54322 -U postgres -d postgres -f supabase/seed.sql

          # テスト実行結果を変数に保存
          test_status=0

          echo "Running CRUD tests..."
          PGPASSWORD=postgres psql -h localhost -p 54322 -U postgres -d postgres -f tests/integration/db/crud.test.sql > test_results/crud.txt 2>&1
          if [ $? -ne 0 ]; then test_status=1; fi
          
          echo "Running RLS tests..."
          PGPASSWORD=postgres psql -h localhost -p 54322 -U postgres -d postgres -f tests/integration/db/rls.test.sql > test_results/rls.txt 2>&1
          if [ $? -ne 0 ]; then test_status=1; fi
          
          echo "Running constraints tests..."
          PGPASSWORD=postgres psql -h localhost -p 54322 -U postgres -d postgres -f tests/integration/db/constraints.test.sql > test_results/constraints.txt 2>&1
          if [ $? -ne 0 ]; then test_status=1; fi

          # テスト結果をoutputとして保存
          echo "test_status=$test_status" >> $GITHUB_OUTPUT
          exit $test_status

      - name: Post test results
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const testStatus = process.env.TEST_STATUS === '0' ? '✅ 成功' : '❌ 失敗';
            
            // テスト結果を読み込む
            const crudResults = fs.readFileSync('test_results/crud.txt', 'utf8');
            const rlsResults = fs.readFileSync('test_results/rls.txt', 'utf8');
            const constraintsResults = fs.readFileSync('test_results/constraints.txt', 'utf8');
            
            // マークダウン形式でコメントを作成
            const body = `## データベーステスト結果 🔍
            
            **テスト結果: ${testStatus}**

            ### 1. CRUD操作テスト
            \`\`\`sql
            ${crudResults}
            \`\`\`

            ### 2. RLSポリシーテスト
            \`\`\`sql
            ${rlsResults}
            \`\`\`

            ### 3. 制約テスト
            \`\`\`sql
            ${constraintsResults}
            \`\`\`
            `;
            
            // PRにコメントを投稿
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
        env:
          TEST_STATUS: ${{ steps.run-tests.outputs.test_status }}

      - name: Stop Supabase local development setup
        if: always()
        run: supabase stop 